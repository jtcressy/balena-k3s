# to run define K3S_TOKEN, K3S_VERSION is optional, eg:
#   K3S_TOKEN=${RANDOM}${RANDOM}${RANDOM} docker-compose up

version: '2'
services:

  # k3s:
  #   image: "rancher/k3s:latest"
  #   entrypoint:
  #   - sh
  #   - -c
  #   - |
  #     k3s $(if [[ "$RESIN_DEVICE_NAME_AT_INIT" == *"master"* ]]; then echo "server"; else echo "agent"; fi) \
  #     --node-name "balena-${RESIN_APP_NAME}-${RESIN_DEVICE_NAME_AT_INIT}" \
  #     --flannel-iface tailscale0 \
  #     --advertise-address $(ip addr show tailscale0 | grep "inet " | awk '{print $2}') \
  #     --node-ip $(ip addr show tailscale0 | grep "inet " | awk '{print $2}') \
  #     --node-external-ip $(ip addr show tailscale0 | grep "inet " | awk '{print $2}') \
  #     --docker \
  #     --disable traefik,servicelb
  #   network_mode: host
  #   tmpfs:
  #   - /run
  #   - /var/run
  #   labels:
  #     io.balena.features.balena-socket: '1'
  #     io.balena.features.kernel-modules: '1'
  #     io.balena.features.firmware: '1'
  #     io.balena.features.dbus: '1'
  #     io.balena.features.sysfs: '1'
  #     io.balena.features.procfs: '1'
  #     io.balena.features.journal-logs: '1'
  #     io.balena.features.supervisor-api: '1'
  #     io.balena.features.balena-api: '1'
  #     io.balena.update.strategy: download-then-kill
  #   ulimits:
  #     nproc: 65535
  #     nofile:
  #       soft: 65535
  #       hard: 65535
  #   privileged: true
  #   restart: always
  #   environment:
  #   - K3S_KUBECONFIG_OUTPUT=/output/kubeconfig.yaml
  #   - K3S_KUBECONFIG_MODE=666
  #   volumes:
  #   - k3s-server:/var/lib/rancher/k3s
  #   # This is just so that we get the kubeconfig file out
  #   - kubeconfig:/output
  #   ports:
  #   - 6443:6443  # Kubernetes API Server
  #   - 80:80      # Ingress controller port 80
  #   - 443:443    # Ingress controller port 443

  # agent:
  #   image: "rancher/k3s:latest"
  #   tmpfs:
  #   - /run
  #   - /var/run
  #   ulimits:
  #     nproc: 65535
  #     nofile:
  #       soft: 65535
  #       hard: 65535
  #   privileged: true
  #   restart: always
  #   environment:
  #   - K3S_URL=https://server:6443
  #   - K3S_TOKEN=${K3S_TOKEN:?err}
  
  tailscale:
    build:
      dockerfile: Dockerfile.template
      context: ./tailscale
    restart: always
    privileged: true
    network_mode: host
    command:
      - --accept-dns
      - --accept-routes
    cap_add:
      - NET_ADMIN
    labels:
      io.balena.features.balena-socket: '1'
      io.balena.features.kernel-modules: '1'
      io.balena.features.firmware: '1'
      io.balena.features.dbus: '1'
      io.balena.features.sysfs: '1'
      io.balena.features.procfs: '1'
      io.balena.features.journal-logs: '1'
      io.balena.features.supervisor-api: '1'
      io.balena.features.balena-api: '1'
      io.balena.update.strategy: download-then-kill
    environment:
      - 'DBUS_SYSTEM_BUS_ADDRESS=unix:path=/host/run/dbus/system_bus_socket'
    volumes:
      - tailscale-config:/var/lib/tailscale
    devices:
      - /dev/net/tun:/dev/net/tun

volumes:
  k3s-server: {}
  tailscale-config: {}
  kubeconfig: {}